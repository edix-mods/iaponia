# country
on_startup = {
	events = {
		christian_school_events.20 #Pick School
	}
}

# country
on_religion_change = {
	events = {
		christian_school_events.20 #Pick School
	}
}

# country.
on_secondary_religion_change = {
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	# ROOT = The winning country
	# FROM = The loosing country
	set_country_flag = helped_rebels_win_war
}

# country
on_colonial_liberation = {
}

# country
on_colonial_reintegration = {
}

# country
on_peace_actor = {
}

# country
on_peace_recipient = {
}

# country
# root = winning country, from = loser country
on_war_won = {
}

# country
# root = winning country, from = loser country
on_main_war_won = {
}

# country
# root = winning country, from = loser country
on_separate_war_won = {
}

# country
# root = loser country, from = winner country
on_war_lost = {
}
on_main_war_lost = {
}
on_separate_war_lost = {
}


# country
# root = winning country, from = loser country
on_battle_won_country = {
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	battle_cult_spreading_effect = yes #Scripted effect for fetishist cult mechanics.
	random_events = {
		90 = 0
		10 = friendship_events.1 #Historical Friendship Broken
	}
}

# province
# root = location, from = loser country
on_battle_won_province = {
}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {
}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {
}

# province
# root = location, from = country doing it
on_added_to_trade_company ={

}

# province
# root = location, from = country doing it
on_removed_from_company ={

}

# province
# root = location, from = country doing it
on_company_formed ={

}

# province
# root = location, from = country doing it
on_company_disolved ={

}

# province
# root = location, from = winner country
on_battle_lost_province = {
}

# country
# root = winning country, from = location
on_siege_won_country = {
	random_events = {
		10 = army_professionalism_events.1 #City Sacked
		100 = 0
	}
}

# country
# root = losing country, from = location
on_siege_lost_country = {
}

# province
# root = location, from = losing country
on_siege_won_province = {
}

# province
# root = location, from = winning country
on_siege_lost_province =  {
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
}

# province
# root = location, from = country that owns it
# Fired right after the great project is constructed
on_great_project_constructed = {
}

# OBS: Consider that the following on_actions can be called for Personal Union juniors as well.
# country
on_new_monarch = {
	if = {
		limit = { has_any_heir_cult_active = yes }
		remove_heir_cult = yes
	}
	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		every_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			has_consort_regency = no
			any_owned_province = {
				has_province_modifier = home_of_consort
			}
		}
		every_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	events = {
		christian_school_events.20 #Pick School
	}
}

on_new_consort = {
	country_event = { id = consort_events.2 }
	if = {
		limit = { has_ruler_flag = had_10_years_anniversary }
		clr_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = had_20_years_anniversary }
		clr_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = consort_had_affection_of_ruler }
		clr_ruler_flag = consort_had_affection_of_ruler
	}
	if = {
		limit = { has_country_modifier = sought_after_bachelor }
		remove_country_modifier = sought_after_bachelor
	}
}

# country
on_monarch_death = {
	if = {
		limit = { has_country_modifier = sought_after_bachelor }
		remove_country_modifier = sought_after_bachelor
	}
}

# country
on_regent = {
}

# country
on_extend_regency = {
}

# country
on_new_term_election = {
	events = {
		700		# Election event
#		elections.720		# Dutch Republic
	}
}

# country
on_death_election = {
	events = {
		701		# Election event
#		elections.721		# Dutch Republic
	}
}

# country
on_death_foreign_slave_ruler = {
#	events = {
#		mamluk_events.0 # Choose new ruler
#	}
}

# country
on_replace_governor = {
#	events = {
#		elections.707
#	}
}


# country
on_bankruptcy = {
}

# country (country annexing, root = target)
on_diplomatic_annex = {
	events = {
		610
	}
}

# country
on_heir_death = {
	if = {
		limit = { has_country_flag = heir_dip_education }
		clr_country_flag = heir_dip_education
	}
	if = {
		limit = { has_country_flag = heir_mil_education }
		clr_country_flag = heir_mil_education
	}
	if = {
		limit = { has_country_flag = heir_adm_education }
		clr_country_flag = heir_adm_education
	}
	if = {
		limit = { has_ruler_flag = well_advised_tutored_heir }
		clr_ruler_flag = well_advised_tutored_heir
	}
	if = {
		limit = { has_ruler_flag = heir_went_on_grand_tour }
		clr_ruler_flag = heir_went_on_grand_tour
	}
	if = {
		limit = { has_country_flag = albrecht_achilles_flag }
		clr_country_flag = albrecht_achilles_flag #Death of original Albrecht Achilles
	}
	if = {
		limit = { has_ruler_flag = sancaga_cikma }
		clr_ruler_flag = sancaga_cikma
		every_owned_province = {
			limit = {
				has_province_modifier = heir_in_training
			}
			remove_province_modifier = heir_in_training
		}
	}
	if = {
		limit = { has_ruler_flag = returned_from_sancaga_sikma_province }
		clr_ruler_flag = returned_from_sancaga_sikma_province
	}
	if = {
		limit = { has_any_heir_cult_active = yes }
		remove_heir_cult = yes
	}
}

# country
on_queen_death = {

	if = {
		limit = { has_consort_flag = 10_years_anniversary }
		set_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_consort_flag = 20_years_anniversary }
		set_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_consort_flag = consort_has_affection_of_ruler }
		set_ruler_flag = consort_had_affection_of_ruler
	}

	if = {
		limit = {
			has_regency = no
			NOT = { has_ruler_flag = widow_widower }
		}
		set_ruler_flag = widow_widower
	}
	if = {
		limit = { has_consort_regency = no }
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = { has_ruler_flag = accepted_help_from_spouses_family }
		clr_ruler_flag = accepted_help_from_spouses_family
	}
	if = {
		limit = { has_ruler_flag = helped_spouses_family }
		clr_ruler_flag = helped_spouses_family
	}
	if = {
		limit = { has_ruler_flag = refused_to_help_spouses_family }
		clr_ruler_flag = refused_to_help_spouses_family
	}
	if = {
		limit = { has_ruler_flag = has_lowborn_consort }
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	if = {
		limit = { has_ruler_flag = has_lowborn_consort }
		clr_ruler_flag = has_lowborn_consort
	}
	if = {
		limit = { has_country_modifier = consort_adm_advice }
		remove_country_modifier = consort_adm_advice
	}
	if = {
		limit = { has_country_modifier = consort_dip_advice }
		remove_country_modifier = consort_dip_advice
	}
	if = {
		limit = { has_country_modifier = consort_mil_advice }
		remove_country_modifier = consort_mil_advice
	}
	if = {
		limit = { has_country_modifier = without_spouse_advice }
		remove_country_modifier = without_spouse_advice
	}
	if = {
		limit = { has_ruler_modifier = affectionate_royal_couple }
		remove_country_modifier = affectionate_royal_couple
	}
	clr_ruler_flag = marriage_length
}

# country
on_new_heir = {
	if = {
		limit = { has_any_heir_cult_active = yes }
		remove_heir_cult = yes
	}
	if = {
		limit = {
			has_country_flag = enabled_cult_for_heirs
		}
		country_event = {
			id = ainu_flavor.600
		}
	}
}

# country
on_weak_heir_claim = {
	events = {
		611		# Pretenders rise up
	}
}

# country : no heir in theocracy
on_heir_needed_theocracy = {
	events = {
		theocracy.1
	}
}

# Emperor from same dynasty
on_successive_emperor = {
#	events = {
#		900
#	}
}

# Called whenever a new emperor is elected
# FROM = Previous Emperor
# ROOT = New Emperor 
on_emperor_elected = {
}

# HRE Prince released by the emperor
on_released_hre_member = {
	events = {
	}
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	events = {
	}
}

# HRE Prince converts to Emperor religion
on_hre_member_true_religion = {
	events = {
	}
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	events = {
	}
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	events = {
	}
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	events = {
	}
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	events = {
	}
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	events = {
	}
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
#	events = {
#		909
#	}
}

# HRE Member takes a HRE province from an outs100e country in a peace (province scope)
on_hre_province_reconquest = {
	events = {
	}
}

on_lock_hre_religion = {
	events = {
	}
}

on_change_hre_religion = {
	events = {
	}
}

on_hre_religion_white_peace = {
	events = {
	}
}

# When a non-native changes government type
on_government_change = {
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = home_of_consort
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
}

# Nation is integrated after being in union
on_integrate = {
	events = {
		610
	}
}

# Nation annexed.
# FROM is the nation being annexed
on_annexed = {
#	events = {
#		celestial_empire_events.1 # Empire dismantled
#	}
#	FROM = {
#	if = {
#			limit = { is_emperor_of_china = yes }
#			dismantle_empire_of_china = yes
#			set_global_flag = empire_of_china_dismantled
#		}
#	}
}

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	events = {

	}
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {
}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {
}

on_embrace_revolution = {
	
}

# THIS = Revolutionary country being beaten, FROM = Country enforcing the peace treaty
on_dismantle_revolution = {
}

# province
on_adm_development = {
}

# province
on_dip_development = {
}

# province
on_mil_development = {
}

on_overextension_pulse = {
	random_events = {
		100 = overextension.1
		100 = overextension.2
		100 = overextension.3
		100 = overextension.4
		100 = overextension.5
		100 = overextension.6
		100 = overextension.7
		100 = overextension.8
		100 = overextension.9
		100 = overextension.10
	}
}


on_colonial_pulse = {
}

on_siberian_pulse = {
}


# country random events
on_monthly_pulse = {
}
on_yearly_pulse = {
}
on_yearly_pulse_2 = {
}
on_yearly_pulse_3 = {
}
on_yearly_pulse_4 = {
}
on_yearly_pulse_5 = {
}

on_bi_yearly_pulse = {
	random_events = {
		# randomevents.txt
		100 = 3051
		100 = 5008
		100 = 5014
		100 = 5015
		100 = 5017
		100 = 5018
		100 = 5019
		100 = 5020
		100 = 5021
		# 100 = 5022
		100 = 5023
		100 = 5024
		100 = 5025
		100 = 5027
		100 = 5032
		100 = 5040
		100 = 5045
		100 = 5050
		100 = 5051
		100 = 5052
		100 = 5053
		10 = 5054
		100 = 5055
		100 = 5056
		100 = 5058
		# 100 = 5059
		100 = 5060
		100 = 5065
		100 = 5068
		100 = 5070
		100 = 5071
		100 = 5072
		100 = 5074
		100 = 5075
		100 = 5076
		100 = 5077
		100 = 5082
		100 = 5085
		100 = 5088
		100 = 5089
		100 = 5090
		100 = 5091
		100 = 5092
		100 = 5093
		100 = 5094
		100 = 5095
		100 = 5097
		100 = 5098
		100 = 5099
		100 = 6000
		100 = 6001
		100 = 6015
		100 = 710
		100 = 711
		100 = 712
		100 = 713
		100 = 714
		100 = 715
		100 = 716
		100 = 717
		100 = 718
		100 = 719
		100 = 720
		100 = 722
		100 = 723
		100 = 725
		100 = 726
		100 = 727
		100 = 728
		100 = 729
		100 = 730
		100 = 731
		100 = 732
		100 = 733
		100 = 734
		100 = 735
		100 = 737
		100 = 738
		100 = 739
		100 = 740
		100 = 742

		100 = 850
		100 = 851
		100 = 852
		100 = 853
		100 = 855
		100 = 857
		100 = 858
		100 = 859
		100 = 860
		100 = 861
		# 100 = 862
		# 100 = 863
		100 = 864
		# 100 = 865
		100 = 866
		100 = 867
		100 = 868
		100 = 869
		100 = 870
		100 = 871
		# 100 = 872 TODO: traveling mistrel event, let's make a poet version of it
		100 = 873
		# 100 = 874
		100 = 875
		100 = 877
		100 = 878
		# 100 = 879
		100 = 880
#		100 = 881
		100 = 836
		100 = 837
		100 = 838

		100 = 9472
		100 = 3097
		100 = 5005
		100 = 5026
		100 = 5037
		100 = 5063
		100 = 6014

		# 100 = random_event.1
		# 100 = random_event.2
		100 = random_event.3
#		100 = random_event.4
		100 = random_event.5
		# 100 = random_event.6
		# 100 = random_event.7
#		100 = random_event.8
		100 = random_event.9
		100 = random_event.10
		100 = random_event.11
		# 100 = random_event.12
#		100 = random_event.13
#		100 = random_event.14
#		100 = random_event.15
		100 = random_event.16

		100 = random_event.26

		# Old Centralisation/Decentralisation
		100 = 806

		# Mercantilism
		100 = 6326
		100 = 6327
		100 = 6328
		100 = 6329

		# Trade Specific
		100 = trade.1
		100 = trade.2
		100 = trade.3
		100 = trade.4
		100 = trade.5
		100 = trade.6
		100 = trade.7
		100 = trade.8
		100 = trade.9
		100 = trade.10
		100 = trade.11
		100 = trade.12

		# Catholic  Events
#		100 = catholic_flavor.4
#		100 = catholic_flavor.5
#		100 = catholic_flavor.6
#		100 = catholic_flavor.7
#		100 = catholic_flavor.8
#		100 = catholic_flavor.9
#		100 = catholic_flavor.10

		# Sailor events
		100 = sailor_event.1
		100 = sailor_event.2
		100 = sailor_event.3
		100 = sailor_event.4
		100 = sailor_event.5

		# Corruption Events
		100 = corruption_event.16
		100 = corruption_event.17
		100 = corruption_event.18
		100 = corruption_event.19
		100 = corruption_event.20

		# Trade League Events
		100 = trade_league.1
		100 = trade_league.2
		100 = trade_league.3
		100 = trade_league.4
		100 = trade_league.7
		100 = trade_league.8
		100 = trade_league.9
		100 = trade_league.10
		100 = trade_league.11
		100 = trade_league.12
		100 = trade_league.13
#		100 = trade_league.14

		# Institution Events
		#Feudalism Spread Events:
		#100 = institution_events.8
		#100 = institution_events.9
		#100 = institution_events.10
		#100 = institution_events.11


		#Personality Events
		50 = personality_events.10 #Just Dilema
		50 = personality_events.11 #A righteous King
		50 = personality_events.12 #A Righteous Republican Ruler
		50 = personality_events.13
		50 = personality_events.14
		50 = personality_events.15
		50 = personality_events.16
		50 = personality_events.17
		50 = personality_events.18
		50 = personality_events.19
		50 = personality_events.20
		50 = personality_events.21
		50 = personality_events.22
		50 = personality_events.23
		50 = personality_events.24
		50 = personality_events.25
		50 = personality_events.26
		50 = personality_events.27
		50 = personality_events.28
		50 = personality_events.29
		50 = personality_events.30
		50 = personality_events.31
		50 = personality_events.32
		50 = personality_events.33
		50 = personality_events.34
		50 = personality_events.35
		50 = personality_events.36
		50 = personality_events.37
		50 = personality_events.38
		50 = personality_events.39
		50 = personality_events.40
		50 = personality_events.41
		50 = personality_events.42
		50 = personality_events.43
		50 = personality_events.44
		50 = personality_events.45
		50 = personality_events.46
		50 = personality_events.47
		50 = personality_events.48
		50 = personality_events.49
		50 = personality_events.50
		50 = personality_events.51
		50 = personality_events.52
		50 = personality_events.53
		50 = personality_events.54
		50 = personality_events.55
		50 = personality_events.56
		50 = personality_events.57
		50 = personality_events.58

		1000 = 0
	}
}

on_bi_yearly_pulse_2 = {
	random_events = {
		100 = corruption_event.1
		100 = corruption_event.2
		100 = corruption_event.3
		100 = corruption_event.4
		100 = corruption_event.5
		100 = corruption_event.6
		100 = corruption_event.7
		100 = corruption_event.8
		100 = corruption_event.9
		100 = corruption_event.10
		200 = corruption_event.11
		200 = corruption_event.12
		200 = corruption_event.13
		200 = corruption_event.14
		200 = corruption_event.15

		4000 = 0
	}
}

on_bi_yearly_pulse_3 = {
	events = {
		christian_school_events.20 #Pick School
	}
}

on_bi_yearly_pulse_4 = {
}

on_bi_yearly_pulse_5 = {
}



# country random events
on_thri_yearly_pulse = {
	random_events = {
		# Republics
		100 = republics.4
		100 = republics.5
		100 = republics.6
		100 = republics.7
		100 = republics.8
		100 = republics.9
		100 = republics.10
		100 = republics.11
		100 = republics.12
		100 = republics.13
		100 = republics.14
		100 = republics.16
		100 = republics.17
		100 = republics.18

		# Theocracies
		100 = devotion_events.1
		100 = devotion_events.2
		100 = devotion_events.3
		100 = devotion_events.4
		100 = devotion_events.5
		100 = devotion_events.7
		100 = devotion_events.8
		100 = devotion_events.9
		100 = devotion_events.10
		100 = devotion_events.11
		100 = devotion_events.12
		100 = devotion_events.13
		100 = devotion_events.14
		100 = devotion_events.15
		100 = devotion_events.16
		100 = devotion_events.18
		100 = devotion_events.19
		100 = devotion_events.22
		100 = devotion_events.23
		100 = devotion_events.24
		100 = devotion_events.100
		100 = devotion_events.101
		100 = devotion_events.102
		100 = devotion_events.104
#		100 = devotion_events.107
#		100 = devotion_events.110
#		100 = devotion_events.119

		1000 = 0
	}
}

on_thri_yearly_pulse_2 = {
}

on_thri_yearly_pulse_3 = {
	random_events = {
		# Subject Interactions
		50 = subject_interaction_events.1
		50 = subject_interaction_events.4
		50 = subject_interaction_events.5
		50 = subject_interaction_events.6
		50 = subject_interaction_events.7
		50 = subject_interaction_events.9
		50 = subject_interaction_events.11
		50 = subject_interaction_events.14
		50 = subject_interaction_events.15
		50 = subject_interaction_events.17
		50 = subject_interaction_events.18
		50 = subject_interaction_events.19
		50 = subject_interaction_events.20
		50 = subject_interaction_events.21
		50 = subject_interaction_events.22
		50 = subject_interaction_events.23
		50 = subject_interaction_events.24
		50 = subject_interaction_events.25
		50 = subject_interaction_events.26
		50 = subject_interaction_events.27
		50 = subject_interaction_events.29
		50 = subject_interaction_events.30
		50 = subject_interaction_events.31
		50 = subject_interaction_events.32
		50 = subject_interaction_events.34
		50 = subject_interaction_events.35
		50 = subject_interaction_events.36
		50 = subject_interaction_events.38
		50 = subject_interaction_events.40
		50 = subject_interaction_events.43
#		75 = tributary_events.1
#		75 = tributary_events.2
#		75 = tributary_events.3
#		75 = tributary_events.4
#		75 = tributary_events.5
#		75 = tributary_events.6
#		75 = tributary_events.7
#		75 = tributary_events.8
#		75 = tributary_events.9
#		75 = tributary_events.10
#		75 = tributary_events.13
#		75 = tributary_events.16
#		75 = tributary_events.17
#		75 = tributary_events.18
#		75 = tributary_events.19
#		75 = tributary_events.23
#		75 = tributary_events.24
#		75 = tributary_events.26
#		75 = tributary_events.25
#		75 = tributary_events.27

		1000 = 0
	}
}

on_thri_yearly_pulse_4 = {
}

on_four_year_pulse = {
	random_events = {
		# Republic Factions
		100 = republic_factions.2
		100 = republic_factions.5
		100 = republic_factions.7
		100 = republic_factions.9
		100 = republic_factions.10
		100 = republic_factions.12
		100 = republic_factions.13
		100 = republic_factions.14
		100 = republic_factions.15
		100 = republic_factions.16
		100 = republic_factions.17
		100 = republic_factions.18
		100 = republic_factions.19
		100 = republic_factions.20
		100 = republic_factions.22
		100 = republic_factions.23
		100 = republic_factions.24

		# Revolutionary Republic Factions
#		100 = revolutionary_republic_factions.0
#		100 = revolutionary_republic_factions.1
#		100 = revolutionary_republic_factions.2
#		100 = revolutionary_republic_factions.3
#		100 = revolutionary_republic_factions.4
#		100 = revolutionary_republic_factions.5
#		100 = revolutionary_republic_factions.6
#		100 = revolutionary_republic_factions.7
#		100 = revolutionary_republic_factions.8
#		100 = revolutionary_republic_factions.9

		# Republican Dictatorship
		100 = republican_dictatorship.1
		100 = republican_dictatorship.2
		100 = republican_dictatorship.3
		100 = republican_dictatorship.4
		100 = republican_dictatorship.5
		100 = republican_dictatorship.6
		100 = republican_dictatorship.7
		100 = republican_dictatorship.8
		1000 = 0
	}
}

on_four_year_pulse_2 = {
}

on_four_year_pulse_3 = {
}

on_four_year_pulse_4 = {
}

on_five_year_pulse = {
}


# Estates pulse
on_five_year_pulse_2 = {
	random_events = {
		# Burghers
		100 = burghers_estate_events.1
		100 = burghers_estate_events.2
		100 = burghers_estate_events.3
		100 = burghers_estate_events.4
		100 = burghers_estate_events.5
		100 = burghers_estate_events.6
		100 = burghers_estate_events.7
		100 = burghers_estate_events.8
		100 = burghers_estate_events.9
		400 = burghers_estate_events.10 #Demands
		100 = burghers_estate_events.11 #Bonus
		100 = burghers_estate_events.12
		100 = burghers_estate_events.13
		400 = burghers_estate_events.14 #Demands
		100 = burghers_estate_events.15 #Disloyal
		# Nobles
		100 = nobles_estate_events.1 #Demands
		100 = nobles_estate_events.2
		100 = nobles_estate_events.3
		100 = nobles_estate_events.4
		400 = nobles_estate_events.5 #Demands
		100 = nobles_estate_events.6
		100 = nobles_estate_events.7
		400 = nobles_estate_events.8 #Disloyal
		400 = nobles_estate_events.9 #Disloyal
		50 = nobles_estate_events.10
		100 = nobles_estate_events.11 #Bonus
		# Clergy
		100 = church_estate_events.1
			#Regional Variations:
#		100 = church_estate_events.101
		100 = church_estate_events.102
#		100 = church_estate_events.103
		100 = church_estate_events.104
		100 = church_estate_events.105
		100 = church_estate_events.2
		100 = church_estate_events.3
		100 = church_estate_events.4
		400 = church_estate_events.5 #Disloyal
		400 = church_estate_events.6 #Demands
		100 = church_estate_events.7 #Bonus
		100 = church_estate_events.8
		100 = church_estate_events.9
		100 = church_estate_events.10
		# Dhimmi
#		100 = dhimmi_estate_events.1
#		400 = dhimmi_estate_events.2 #Demands
#		100 = dhimmi_estate_events.3
#		100 = dhimmi_estate_events.4
#		100 = dhimmi_estate_events.5
#		100 = dhimmi_estate_events.6
#		400 = dhimmi_estate_events.7 #Disloyal
#		100 = dhimmi_estate_events.8
		# Cossacks
#		100 = cossack_estate_events.1
#		100 = cossack_estate_events.2 (triggers in neighbor country)
#		100 = cossack_estate_events.8
#		100 = cossack_estate_events.9
#		100 = cossack_estate_events.10
#		100 = cossack_estate_events.11
#		400 = cossack_estate_events.12 #Disloyal
#		100 = cossack_estate_events.13
#		400 = cossack_estate_events.14 #Demands
		# Tribes
#		100 = tribal_estate_events.1
#		100 = tribal_estate_events.2
#		100 = tribal_estate_events.3
#		100 = tribal_estate_events.4
#		100 = tribal_estate_events.5
#		100 = tribal_estate_events.6
#		100 = tribal_estate_events.7
#		100 = tribal_estate_events.8
#		100 = tribal_estate_events.9
#		150 = tribal_estate_events.11 #Demands
#		150 = tribal_estate_events.12 #Demands
#		150 = tribal_estate_events.13 #Demands
#		150 = tribal_estate_events.14 #Demands

		1000 = 0
	}
}

on_five_year_pulse_3 = {
}

on_five_year_pulse_4 = {
}

# El Dorado
on_explore_coast = {
}
on_conquistador_empty = {
}

on_conquistador_native = {
}

on_buy_religious_reform = {
}

on_circumnavigation = {
}

on_become_free_city = {
}

on_remove_free_city = {
}

on_revoke_estate_land_ai = { #AI can't handle the rebels atm or perform a gradual revoke, sorry
}

on_revoke_estate_land = {
#	if = {
#		limit = {
#			has_estate = estate_cossacks
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_cossacks
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = cossack_rebels
#			size = 1
#		}
#		province_event = { id = cossack_estate_events.15 }
#	}
#	if = {
#		limit = {
#			has_estate = estate_dhimmi
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_dhimmi
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = religious_rebels
#			size = 1
#		}
#		province_event = { id = dhimmi_estate_events.9 }
#	}
	if = {
		limit = {
			has_estate = estate_church
			has_owner_religion = yes
			owner = {
				NOT = {
					estate_loyalty = {
						estate = estate_church
						loyalty = 40
					}
				}
			}
		}
		spawn_rebels = {
			type = religious_rebels
			size = 1
		}
		province_event = { id = church_estate_events.11 }
	}
	if = {
		limit = {
			has_estate = estate_church
			has_owner_religion = no
			owner = {
				NOT = {
					estate_loyalty = {
						estate = estate_church
						loyalty = 40
					}
				}
			}
		}
		spawn_rebels = {
			type = particularist_rebels
			size = 1
		}
		province_event = { id = church_estate_events.11 }
	}
	if = {
		limit = {
			has_estate = estate_nobles
			owner = {
				NOT = {
					estate_loyalty = {
						estate = estate_nobles
						loyalty = 40
					}
				}
			}
		}
		spawn_rebels = {
			type = noble_rebels
			size = 1
		}
		province_event = { id = nobles_estate_events.12 }
	}
	if = {
		limit = {
			has_estate = estate_burghers
			owner = {
				NOT = {
					estate_loyalty = {
						estate = estate_burghers
						loyalty = 40
					}
				}
			}
		}
		spawn_rebels = {
			type = particularist_rebels
			size = 1
		}
		province_event = { id = burghers_estate_events.16 }
	}
#	if = {
#		limit = {
#			has_estate = estate_nomadic_tribes
#			owner = {
#				NOT = {
#					estate_loyalty = {
#						estate = estate_nomadic_tribes
#						loyalty = 40
#					}
#				}
#			}
#		}
#		spawn_rebels = {
#			type = tribal_rebels
#			size = 1
#		}
#	}
}

on_revoke_estate_land_ai_post = {
	add_local_autonomy = 25
}
on_revoke_estate_land_post = {
	add_local_autonomy = 25
}

on_grant_estate_land = {
}

on_death_has_harem = {
}

on_select_heir_from_harem = {
}

on_fetishist_cult_change = {
}

# country
on_gain_great_power_status = {
	if = {
		limit = {
			NOT = { has_country_flag = became_great_power_flag }
		}
		set_country_flag = became_great_power_flag
	}
}

# country
on_lose_great_power_status = {
}

# province
on_province_religion_converted = {
}

# province
on_province_culture_converted = {
}

# THIS = Province, FROM = Country who Propogated
on_convert_by_trade_policy = {
}

# province
# FROM = old owner
on_province_owner_change = {
}

# country
on_parliament_debate_failed = {
}

# country
on_parliament_debate_succeeded = {
}

# country
# Harmonization events
on_harmonized_kamuism = {
	on_harmonized_effect = yes
	on_harmonized_religion_estate_privileges_effect = yes
	events = {
		ryukyu_faith.1
	}
}

on_harmonized_kirishitan = {
	on_harmonized_effect = yes
	on_harmonized_religion_estate_privileges_effect = yes
	events = {
		ryukyu_faith.2
	}
}

on_harmonized_japonic = {
	on_harmonized_effect = yes
	on_harmonized_religion_estate_privileges_effect = yes
	events = {
		ryukyu_faith.7
	}
}

## Unused vanilla faiths
# on_harmonized_pagan = {}
# on_harmonized_muslim = {}
# on_harmonized_jewish_group = {}
# on_harmonized_zoroastrian_group = {}
# on_harmonized_dharmic = {}
# on_harmonized_mahayana = {}
# on_harmonized_buddhism = { #Theravada }
# on_harmonized_vajrayana = {}

# country
on_russian_sudebnik = {

}

# country
on_russian_oprichnina = {

}

# country
on_russian_streltsy = {

}

# province
on_consecrate_patriarch = {
}

# country. from = overlord
on_accept_tribute = {
}

# country. from = overlord
on_refuse_tribute = {
}

# country
on_leader_recruited = {
}

# country
on_general_recruited = {
	add_army_professionalism = 0.01
}

# country
on_admiral_recruited = {
}

# country
on_conquistador_recruited = {
}

# country
on_explorer_recruited = {
}

# THIS = Province, FROM = Country
on_regiment_recruited = {

}

# THIS = Province, FROM = Country
on_mercenary_recruited = {
	FROM = {
		add_army_professionalism = -0.05
	}
}

# THIS = One province in the state
on_add_pasha = {
}

# THIS = One province in the state
on_remove_pasha = {
	hidden_effect = {
		owner = {
			save_event_target_as = province_owner
		}
		remove_province_modifier = pasha_removed_modifier
	}

	area = {
		limit = { owned_by = event_target:province_owner }
		add_or_extend_province_modifier_effect = { MODIFIER = pasha_removed_modifier DURATION = 3650 }
	}
}

# THIS = Province
on_janissaries_raised = {
}

on_cawa_raised = {
}

on_carolean_raised = {
}

on_hussars_raised = {
}

on_revolutionary_guard_raised = {
}

on_reform_enacted = {
}

on_reform_changed = {
}

on_trade_company_investment = {
}

on_center_of_trade_upgrade = {
	if = {
		limit = { owner = { has_country_flag = enable_upgrading_centers_of_trade_dev } }
		add_base_production = 1 
	}
}

on_center_of_trade_downgrade = {
	if = {
		limit = { owner = { has_country_flag = enable_upgrading_centers_of_trade_dev } }
		add_base_production = -1 
	}
}

on_culture_promoted = {
	on_culture_promoted_estate_privileges_effect = yes
}

on_culture_demoted = {
	on_culture_demoted_estate_privileges_effect = yes
}

on_primary_culture_changed = {
	on_primary_culture_changed_privileges_effect = yes
}

# FROM = Previous Country, ROOT = Province
on_company_chartered = {
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
}

# ROOT = Overlord, FROM = Minor
on_dependency_lost = {

}

# ROOT = New vassal, FROM = Overlord
on_create_vassal = {
	on_religion_change_estate_privileges_effect = yes
	if = {
		limit = { NOT = { is_year = 1445 } }
		set_country_flag = released_in_1444
	}
}

# ROOT = Country establishing it
# First province in state is set
on_holy_order_established = {

}

# When a minority is expelled to a colony
# THIS = Colony, ROOT = Colony, FROM = Home province
on_minority_expelled = {
}

# THIS = Raiding country, FROM = Sea province
on_raid_coast = {
	if = {
		limit = {
			has_faction = pr_buccaneers
		}
		add_faction_influence = {
			faction = pr_buccaneers
			influence = 1
		}
	}
	if = {
		limit = {
			has_government_attribute = raiding_increases_pp
		}
		add_power_projection = {
			type = high_sea_power_projection
			amount = 1
		}
	}
	if = {
		limit = {
			has_mission = dan_raid_the_north_sea
			NOT = { mission_completed = dan_raid_the_north_sea } 
		}
		change_variable = {
			which = num_of_raided_coasts
			value = 1
		}
	}
}

# ROOT = Tag that captured the flagship, FROM = Tag that lost the flagship
on_flagship_captured = {
	FROM = {
		set_country_flag = captured_flagship_country_flag
	}
	ROOT = {
		country_event = { id = flagship_events.2 }
		set_country_flag = trophy_hunter_flag
	}
	FROM = {
		country_event = { id = flagship_events.1 }
	}
}

# ROOT = Tag that destroyed the flagship, FROM = Tag that lost the flagship
on_flagship_destroyed = {
	FROM = {
		set_country_flag = sunk_flagship_country_flag
	}
	ROOT = {
		country_event = { id = flagship_events.4 }
	}
	FROM = {
		country_event = { id = flagship_events.3 }
	}
}

# this = Released country, FROM = Releasing country
on_country_released = {
	if = {
		limit = { NOT = { is_year = 1445 } }
		set_country_flag = released_in_1444
	}
}

# ROOT = province, FROM = country
on_trade_good_changed = {
	on_trade_good_changed_estate_privileges_effect = yes
	on_trade_good_changed_government_effect = yes
}

# this = country
on_loan_repaid = {
	on_loan_repaid_estate_privileges_effect = yes
}

# this = country
on_rebels_break_country = {
	add_country_modifier = {
		name = just_lost_to_rebels
		duration = 10
		hidden = yes
	}
}

# this = country
## Fires when you fire or replace your ADM advisor, in the moment before they are actually removed from their post.
## Note: Defining a new advisor here will result in the shortest appointment in history. Use on_post_adm_advisor_fired instead :)
on_pre_adm_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_adm_advisor
		}
		set_country_flag = just_fired_adm_advisor
		remove_advisor_by_category_no_action = ADM
	}
}

# this = country
on_pre_dip_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_dip_advisor
		}
		set_country_flag = just_fired_dip_advisor
		remove_advisor_by_category_no_action = DIP
	}
}

# this = country
on_pre_mil_advisor_fired = {
	if = {
		limit = {
			has_country_flag = need_to_fire_mil_advisor
		}
		set_country_flag = just_fired_mil_advisor
		remove_advisor_by_category_no_action = MIL
	}
}

# this = country
on_post_adm_advisor_fired = {

}

# this = country
on_post_dip_advisor_fired = {
	
}

# this = country
on_post_mil_advisor_fired = {
	
}

# this = new client state, from = parent country
on_create_client_state = {
	
}

# this = new target, from = previous target (both can be non-existent tag)
on_change_revolution_target = {
	if = {
		limit = { has_reform = junior_revolutionary_republic_reform }
		add_government_reform = revolutionary_republic_reform
	}
}

# this = curia controller (enactor of the bull)
on_golden_bull_enacted = {
	set_country_flag = enacted_golden_bull
}


# province:  spawned whenever a new owner takes over the province
# FROM = The previous owner.
on_conquest = {
	remove_named_unrest = estate_land_seized
	clr_province_flag = has_estate_unrest_flag
}

on_country_creation = {
}

on_federation_leader_change = {
}

#FROM = country pillaged, ROOT = country doing the pillaging
on_pillaged_capital = {
}

#FROM = country dev was transferred from, ROOT = country doing the transferring
on_transfer_development = {
}

on_colonial_type_change = {
}

on_estate_led_regency = {
	if = {
		limit = {
			has_government_attribute = improved_nobles_regency
			OR = {
				has_estate = estate_nobles
				AND = {
					NOT = { has_estate = estate_nobles }
					OR = {
						has_estate = estate_maratha
						has_estate = estate_rajput
					}
				}
			}
		}
		add_ruler_modifier = {
			name = empowered_regency_modifier
			duration = -1
		}
		change_adm = 1
		change_dip = 1
		change_mil = 1
	}
}

on_estate_led_regency_surpassed = {
	if = {
		limit = {
			is_lesser_in_union = no
			num_of_powerful_estates = 1
			has_estate_led_regency = {
				estate = any
			}
			NOT = {
				estate_led_regency_influence = 70
			}
			OR = {
				AND = {
					has_estate_led_regency = {
						estate = estate_burghers
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_church
							modifier = REFUSED_REGENCY
						}
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_nobles
							modifier = REFUSED_REGENCY
						}
					}
				}
				AND = {
					has_estate_led_regency = {
						estate = estate_church
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_burghers
							modifier = REFUSED_REGENCY
						}
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_nobles
							modifier = REFUSED_REGENCY
						}
					}
				}
				AND = {
					has_estate_led_regency = {
						estate = estate_nobles
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_burghers
							modifier = REFUSED_REGENCY
						}
					}
					NOT = {
						has_estate_loyalty_modifier = {
							estate = estate_church
							modifier = REFUSED_REGENCY
						}
					}
				}
			}
		}
		country_event = { id = estate_regency_events.1 }
	}
}

on_extended_regency = {
	random_events = {
		100 = extended_regency_events.4
		100 = extended_regency_events.5
		100 = extended_regency_events.6
		
		300 = 0
	}
}

on_estate_removed = {
	if = {
		limit = {
			has_country_modifier = dhimmi_building_restrictions
			NOT = {
				has_estate = estate_dhimmi
			}
		}
		remove_country_modifier = dhimmi_building_restrictions
	}
	if = {
		limit = {
			has_country_modifier = swe_debt_with_the_clergy
			NOT = { has_estate = estate_church }
		}
		remove_country_modifier = swe_debt_with_the_clergy
	}
	if = {
		limit = {
			has_country_modifier = swe_debt_with_the_burghers
			NOT = { has_estate = estate_burghers }
		}
		remove_country_modifier = swe_debt_with_the_burghers
	}
	if = {
		limit = {
			has_country_modifier = swe_debt_with_the_nobles
			NOT = { has_estate = estate_nobles }
		}
		remove_country_modifier = swe_debt_with_the_nobles
	}
}

##scope = colony province, FROM = owner country or province if there's a minority expulsion source
on_colonist_boosting_colony = {
}

#ROOT = converted country, FROM = country which force converts ROOT, on_action gets called on Force religion peace and Enforce Religion subject interaction
on_force_conversion = {
}

on_institution_embracement = {
	if = {
		limit = {
			has_government_attribute = monarch_power_on_institutions
		}
		add_adm_power = 100
		add_dip_power = 100
		add_mil_power = 100
	}
}
on_national_focus_change = {}
on_capital_moved = {}

#ROOT = province that was expanded in, FROM = country that did it
on_expanded_infrastructure = {
}

#ROOT = province that was centralized in
on_centralized_state = {
	if = {
		limit = {
			owner = { has_government_attribute = centralize_state_no_reform_cost }
		}
		owner = {
			add_adm_power = 50
			change_government_reform_progress = 50
		}
	}
	else_if = {
		limit = {
			owner = { has_government_attribute = centralize_state_half_refund }
		}
		owner = {
			add_adm_power = 25
			change_government_reform_progress = 25
		}
	}
	if = {
		limit = {
			owner = { has_government_attribute = centralize_state_development }
		}
		area = {
			limit = {
				owned_by = ROOT
			}
			random_list = {
				1 = { add_base_tax = 1 }
				1 = { add_base_production = 1 }
				1 = { add_base_manpower = 1 }
			}
		}
	}
}

#ROOT = country
monarch_on_shipwreck = {
}
heir_on_shipwreck = {
}
consort_on_shipwreck = {
}

#ROOT = country
on_defender_of_faith_loss = {
	clr_country_flag = claimed_defender_of_faith_flag
	remove_country_modifier = gov_improved_defender_of_faith_mod
}
on_defender_of_faith_claim = {
	set_country_flag = claimed_defender_of_faith_flag
}
on_hre_dismantled = {
}
on_new_age = {
}

#ROOT = province
on_adm_exploited = {
	if = {
		limit = { owner = { has_government_attribute = may_not_reduce_tax_on_exploitation } }
		random = {
			chance = 50
			add_base_tax = 1
		}
	}
	if = {
		limit = { owner = { has_government_attribute = may_not_reduce_tax_on_own_exploitation culture_group = ROOT } }
		random = {
			chance = 25
			add_base_tax = 1
		}
	}
	if = {
		limit = { owner = { has_government_attribute = may_not_reduce_tax_on_foreign_exploitation NOT = { culture_group = ROOT } } }
		random = {
			chance = 50
			add_base_tax = 1
		}
	}
}
on_dip_exploited = {
}
on_mil_exploited = {
}
on_raze = {
}
on_concentrate_development = {
}
