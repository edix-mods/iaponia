#AVIALABLE CUSTOM LOCALISATION KEYS
#When adding new custom loc keys, add them to the appropriate category (or add a new one) and describe them. Name the strings "String_X" where x is its content.
# To not display anything, you can use 'localisation_key = ""'
# Please add one example sentence for each key.

#As this list grow organize with categories.
#Current loc keys in this file:
#GetTributaryOverlord
#GetOldEra
#GetLocalPowerStructure
#GetGovernmentSupporters
#GetNoblesReplacementForOtherGovernments
#GetChurchRank


### Titular for Overlord
#Ex: "On a mission to visit the [Son of Heaven]"
defined_text = {
    name = GetTributaryOverlord

    text = {
        localisation_key = string_son_of_heaven
        trigger = {
			is_emperor_of_china = yes
            is_female = no
        }
    }
    text = {
        localisation_key = string_daughter_of_heaven
        trigger = {
			is_emperor_of_china = yes
            is_female = yes
        }
    }
	text = {
        localisation_key = string_tributary_overlord_title
        trigger = {
			is_emperor_of_china = no
        }
	}
}

#Old Era
#Ex: "A [Medieval] Manuscript"
defined_text = {
    name = GetOldEra

	text = {
        localisation_key = string_ancient_era
        trigger = {
			always = yes
        }
	}
}

#Low Level Official
#Ex: "A local [Mandarin] immediately reacted to the..."
defined_text = {
    name = GetLowLevelOfficialForCountry

	text = {
        localisation_key = string_official
        trigger = {
			always = yes
        }
	}
}

#A local power structure, such as a court or local parliament
#Ex: "The [Court] refused our request to hand over the culprits"
defined_text = {
    name = GetLocalPowerStructure

    text = {
        localisation_key = string_court
		trigger = {
			always = yes
		}
    }
}

#Supporters of the Ruler, be he a Khan, King or President
#Ex: "The [Royalists] have come to our aid"
defined_text = {
    name = GetGovernmentSupporters

    text = {
        localisation_key = string_royalist
		trigger = {
			government = monarchy
		}
    }
	text = {
        localisation_key = string_khanzada
		trigger = {
			has_reform = steppe_horde
		}
    }
	text = {
        localisation_key = string_royalist
		trigger = {
			government = tribal
		}
    }
	text = {
		 localisation_key = string_republican
		trigger = {
			government = republic
		}
	}
	text = {
		 localisation_key = string_clergy
		trigger = {
			government = theocracy
		}
	}
}


#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "The [Nobles] are Concerned"
defined_text = {
	name = GetNoblesReplacementForOtherGovernments

	text = {
		localisation_key = string_nobles
		trigger = {
			NOT = { government = republic }
		}
	}
	text = {
		localisation_key = string_influential_families
		trigger = {
			government = republic
		}
	}
}

#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "The [Nobles] are Concerned"
defined_text = {
	name = GetRoyalOrState

	text = {
		localisation_key = string_royal
		trigger = {
			NOT = { government = republic }
		}
	}
	text = {
		localisation_key = string_state
		trigger = {
			government = republic
		}
	}
}

#When you need to refer a government/state
#In the future incorporate more special things here
#Ex: "The [Crown] of X"
defined_text = {
	name = GetStateForm

	text = {
		localisation_key = string_crown
		trigger = {
			government = monarchy
		}
	}
	text = {
		localisation_key = string_council
		trigger = {
			government = republic
		}
	}
	text = { #fallback
		localisation_key = string_govtname
		trigger = {
			NOT = { government = monarchy }
			NOT = { government = republic}
		}
	}
}

#Definite Article before name? (ie for country names in plural form)
defined_text = {
    name = GetDefiniteArticleBeforePluralCountry
	random = no
	
	text = {
		
        localisation_key = string_definite_article_before_country
        trigger = {
			tag_with_plural_name_trigger = yes
        }
    }
    text = {
        localisation_key = string_empty
        trigger = {
			always = yes
        }
    }
}

#Hiding regency council in titles

defined_text = {
    name = GetRulerOrRegency
	random = no
	
	text = {
        localisation_key = string_ruler_name_really
        trigger = {
			has_regency = no
        }
    }
    text = {
        localisation_key = string_regency_council
        trigger = {
			has_regency = yes
        }
    }
}

#When you need to refer to a ruling social class but cannot be sure you're dealing with a monarchy.
#Ex: "Several [members of the nobility] / [politicians] / [members of the clergy]"
defined_text = {
	name = GetNobilityPoliticians

	text = {
		localisation_key = string_members_nobility
		trigger = {
			NOT = { government = republic }
			NOT = { government = theocracy }
			NOT = {
				has_parliament = yes
			}
		}
	}
	text = {
		localisation_key = string_politicians
		trigger = {
			OR = {
				has_parliament = yes
				government = republic
			}
		}
	}
	text = {
		 localisation_key = string_clergy_members
		trigger = {
			government = theocracy
			NOT = {
				has_parliament = yes
			}
		}
	}
}

#Because "the Papal Pope" would be a new kind of stupid, also covers regency councils
#Ex: The [English King] / The [Pope] / The [English Regency Council]
defined_text = {
	name = GetRulerAdjAndTitle

	text = {
		localisation_key = string_ruler_adj_and_title
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_ruler_title
		trigger = {
			#tag = PAP
		}
	}
	text = {
		localisation_key = string_adj_and_regency_council
		trigger = {
			has_regency = yes
		}
	}
}


#Gets ruler title or regency council (not strictly speaking necessary as it will still find "king" even if said king is 1 year old)
#Ex: The [King] / The [Regency Council]
defined_text = {
	name = GetRulerTitleOrRegency

	text = {
		localisation_key = string_ruler_title
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council_2
		trigger = {
			has_regency = yes
		}
	}
}

#If you want to refer to the ruler by name but are not sure whether there may be a regency
#Ex: [King James] / [the Regency Council]
defined_text = {
	name = GetRulerTitleAndNameOrRegency

	text = {
		localisation_key = string_ruler_title_and_name
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council_no_cap
		trigger = {
			has_regency = yes
		}
	}
}

#If you want to refer to the ruler by name but are not sure whether there may be a regency
#Ex: [King James] / [The Regency Council]
defined_text = {
	name = GetRulerTitleAndNameOrRegencyCap

	text = {
		localisation_key = string_ruler_title_and_name
		trigger = {
			has_regency = no
		}
	}
	text = {
		localisation_key = string_regency_council
		trigger = {
			has_regency = yes
		}
	}
}

###Estate scripted locs: Get current estate name, or if the country lacks one, use the basic one

defined_text = {
	name = GetNobilityOrFallbackName
	random = no
	
	text = {
		localisation_key = country_estate_nobles_name
		trigger = {
			has_estate = estate_nobles
		}
	}
	
	text = {
		localisation_key = estate_nobles
		trigger = {
			NOT = { has_estate = estate_nobles }
		}
	}
}

defined_text = {
	name = GetBurghersOrFallbackName
	random = no
	
	text = {
		localisation_key = country_estate_burghers_name
		trigger = {
			has_estate = estate_burghers
		}
	}
	
	text = {
		localisation_key = estate_burghers
		trigger = {
			NOT = { has_estate = estate_burghers }
		}
	}
}

defined_text = {
	name = GetChurchOrFallbackName
	random = no
	
	text = {
		localisation_key = country_estate_church_name
		trigger = {
			has_estate = estate_church
		}
	}
	
	text = {
		localisation_key = estate_church
		trigger = {
			NOT = { has_estate = estate_church }
		}
	}
}

defined_text = {
	name = GetTribesOrFallbackName
	random = no
	
	text = {
		localisation_key = country_estate_nomadic_tribes_name
		trigger = {
			has_estate = estate_nomadic_tribes
		}
	}
	
	text = {
		localisation_key = estate_nomadic_tribes
		trigger = {
			NOT = { has_estate = estate_nomadic_tribes }
		}
	}
}

#Prints the noun associated with the religion e.g. "Catholicism" or "Sunni Islam". Works in country and province scope.
defined_text = {
	name = GetReligionNoun
	random = no
	text = {
		localisation_key = kirishitan_string
		trigger = {
			religion = kirishitan
		}
	}
	text = {
		localisation_key = shintoism_string
		trigger = {
			religion = shinto
		}
	}
	text = {
		localisation_key = nichirenshu_string
		trigger = {
			religion = nichirenshu
		}
	}
	text = {
		localisation_key = jodoshinshu_string
		trigger = {
			religion = jodoshinshu
		}
	}
	text = {
		localisation_key = ainu_religion_string
		trigger = {
			religion = ainu
		}
	}
	text = {
		localisation_key = ryukyuan_religion_string
		trigger = {
			religion = ryukyuan
		}
	}
}

defined_text = {
    name = GetHeirPrimaryCultFeature

    text = {
        localisation_key = empty_text
        trigger = {
            NOT = { has_country_flag = enabled_cult_for_heirs }
        }
    }

    text = {
        localisation_key = primary_cults_for_heirs_tt
        trigger = {
            has_country_flag = enabled_cult_for_heirs
        }
    }
}
